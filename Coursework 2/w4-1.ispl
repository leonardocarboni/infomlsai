-- Group 5: Giacomo Bais, Leonardo Carboni, Vito Vekic

Agent Environment
    Vars:
    	a: 1 .. 3;
    	b: 1 .. 3;
    	c: 1 .. 3;
    end Vars
    Actions = {};
    Protocol:
    end Protocol
    Evolution:
    end Evolution
end Agent

Agent a
	Lobsvars = {a};
    Vars:
    	dummy: boolean;
    end Vars
    Actions = {nil};
    Protocol:
    	dummy = false or dummy = true: {nil};
    end Protocol
    Evolution:
    	dummy = true if dummy = true;
    end Evolution
end Agent

Agent b
	Lobsvars = {b};
    Vars:
    	dummy: boolean;
    end Vars
    Actions = {nil};
    Protocol:
    	dummy = false or dummy = true: {nil};
    end Protocol
    Evolution:
    	dummy = true if dummy = true;
    end Evolution
end Agent

Agent c
	Lobsvars = {c};
    Vars:
    	dummy: boolean;
    end Vars
    Actions = {nil};
    Protocol:
    	dummy = false or dummy = true: {nil};
    end Protocol
    Evolution:
    	dummy = true if dummy = true;
    end Evolution
end Agent

Evaluation
	a1 if Environment.a = 1;
	a2 if Environment.a = 2;
	a3 if Environment.a = 3;
	b1 if Environment.b = 1;
	b2 if Environment.b = 2;
	b3 if Environment.b = 3;
	c1 if Environment.c = 1;
	c2 if Environment.c = 2;
	c3 if Environment.c = 3;
end Evaluation

InitStates
	(Environment.a = 1 and Environment.b = 2 and Environment.c = 3) or 
	(Environment.a = 1 and Environment.b = 3 and Environment.c = 2) or
	(Environment.a = 2 and Environment.b = 1 and Environment.c = 3) or
	(Environment.a = 2 and Environment.b = 3 and Environment.c = 1) or
	(Environment.a = 3 and Environment.b = 2 and Environment.c = 1) or
	(Environment.a = 3 and Environment.b = 1 and Environment.c = 2);
end InitStates

Groups
	ab = {a, b};
	bc = {b, c};
	ac = {a, c};
	abc = {a, b, c};
end Groups

Formulae
	--Everywhere globally, if c3 is true, then agent c knows c3
	AG(c3 -> K(c, c3));
	--Everywhere globally, agent a does not know c3
	AG(!K(a, c3));
	--Everywhere globally, it is not common knowlege between a and b that c3
	AG(!GCK(ab, c3));
	--Everywhere globally, it is distributed knowlege between a and b that c3
	--AG(DK(ab, c3));
	--Everywhere globally, c knows that b does not know that c3
	AG(K(c, !K(b, c3)));
	--Everywhere globally, if a has card 1, then a knows that c has card 2 or 3.
	AG(a1 -> K(a, c2 or c3));
end Formulae
